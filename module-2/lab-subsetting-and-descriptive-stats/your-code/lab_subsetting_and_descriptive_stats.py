# -*- coding: utf-8 -*-
"""lab-subsetting-and-descriptive-stats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GsPV2PFxPDybhp9_DaszG9wanEwdXnMc

# Before you start :
   - These exercises are related to the Subsetting and Descriptive Stats lessons.
   - Keep in mind that you need to use some of the functions you learned in the previous lessons.
   - All datasets are provided in the `your-code` folder of this lab.
   - Elaborate your codes and outputs as much as you can.
   - Try your best to answer the questions and complete the tasks and most importantly enjoy the process!!!

#### Import all the libraries that are necessary
"""

# import libraries here
import pandas as pd
import matplotlib

"""# Challenge 1

#### In this challenge we will use the `Temp_States.csv` file. 

#### First import it into a data frame called `temp`.
"""

# your answer here
from google.colab import drive 
drive.mount('/content/gdrive')

temp=pd.read_csv('gdrive/My Drive/Temp_States.csv')

"""#### Print `temp`"""

print(temp)

"""#### Explore the data types of the Temp dataframe. What type of data do we have? Comment your result."""

# your answer here
temp.dtypes

"""#### Select the rows where state is New York"""

# your answer here
temp[temp['State']=='New York'] #llamamos a la columna donde se encuentra NY y ponemos que sea igual a NY

"""#### What is the average of the temperature of cities in New York?"""

# your answer here
temp[temp['State']=='New York']['Temperature'].mean() #Agregamos el objeto que queremos promediar y la funcion['Temperature'].mean()

"""#### We want to know cities and states with Temperature above 15 degress Celcius"""

# your answer here
temp[temp.Temperature > 15]

"""#### Now, return only the cities that have a temperature above 15 degress Celcius"""

# your answer here
temp[temp.Temperature > 15].City	#El.city limita las columnas a mostrar

"""#### We want to know which cities have a temperature above 15 degrees Celcius and below 20 degrees Celcius

*Hint: First write the condition then select the rows.*
"""

# your answer here
temp[temp.Temperature > 15][temp.Temperature < 20].City

"""#### Find the mean and the standard deviation of the temperature of each state.

*Hint: Use functions from Data Manipulation lesson*
"""

# Definimos una variable, aplicamos por estado el std
states = temp.State.values

temp.groupby(['State']).std()

"""# Challenge 2

#### Load the `employee.csv` file into a DataFrame. Call the dataframe `
`
"""

# your answer here
from google.colab import drive 
drive.mount('/content/gdrive')

employee=pd.read_csv('gdrive/My Drive/Employee.csv')

"""#### Explore the data types of the Temp dataframe. Comment your results"""

# your answer here
employee.dtypes

"""#### Show visually the frequency distribution (histogram) of the employee dataset. In few words describe these histograms?"""

# your answer here
employee.hist()

"""#### What's the average salary in this company?"""

# your answer here
employee['Salary'].mean()

"""#### What's the highest salary?"""

# your answer here
employee['Salary'].max()

"""#### What's the lowest salary?"""

# your answer here
employee['Salary'].min()

"""#### Who are the employees with the lowest salary?"""

# your answer here
employee[employee.Salary < 48]

"""#### Could you give all the information about an employee called David?"""

# your answer her
employee[employee.Name=='David']

"""#### Could you give only David's salary?"""

# your answer here
employee[employee.Name=='David'].Salary

"""#### Print all the rows where job title is associate

---
"""

# your answer here
employee['Title']

"""#### Print the first 3 rows of your dataframe

##### Tip : There are 2 ways to do it. Do it both ways
"""

# your answer here- 1 method

employee.iloc[0:1000, 0:2]

# your answer here- 2nd method
employee.loc[0:10000, ['Name', 'Department']]

"""#### Find the employees who's title is associate and the salary above 55?"""

# your answer here
employee[employee.Salary > 50]

"""#### Group the employees based on their number of years of employment. What are the average salaries in each group?"""

# your answer here
employee[employee.Title=='associate']

"""####  What is the average Salary per title?"""

# your answer here
employee.groupby(['Title']).Salary.mean()

"""#### Show a visual summary of the data using boxplot. What Are the First and Third Quartiles? Comment your results.
##### * Hint : Quantiles vs Quartiles*
##### - `In Probability and Statistics, quantiles are cut points dividing the range of a probability distribution into continuous intervals with equal probabilities. When division is into four parts the values of the variate corresponding to 25%, 50% and 75% of the total distribution are called quartiles.`
"""

# draw boxplot here
employee.boxplot()

# print first quartile here
employee.quantile(0.25)

# print third quartile here
employee.quantile(0.75)

"""#### Is the mean salary per gender different?"""

# your answer here
employee.groupby(['Gender']).Salary.mean()

"""#### Find the minimum, mean and the maximum of all numeric columns for each Department.

##### Hint: Use functions from Data Manipulation lesson
"""

# your answer here
employee.describe()

"""### Bonus Question

#### For each department, compute the difference between the maximal salary and the minimal salary.

##### * Hint: try using `agg` or `apply` and `lambda`*
"""

# your answer here

"""# Challenge 3

#### Open the Orders.csv dataset. Name your dataset orders
"""

# your answer here

from google.colab import drive 
drive.mount('/content/gdrive')

orders=pd.read_csv('gdrive/My Drive/Orders.csv')

"""#### Explore your dataset by looking at the data types and the summary statistics. Comment your results"""

# your answer here
orders.dtypes
orders.head()

# your answer here
orders.describe()

"""####  What is the average Purchase Price?"""

# your answer here
orders['UnitPrice'].mean()

"""#### What were the highest and lowest purchase prices?"""

# your answer here
orders['UnitPrice'].max()

# your answer here
orders['UnitPrice'].min()

"""#### Select all the customers we have in Spain"""

# your answer here
orders[orders.Country=='Spain']

"""#### How many customers do we have in Spain?
##### Hint : Use value_counts()
"""

# your answer here
orders[orders.Country=='Spain'].count()

"""#### Select all the customers who have bought more than 50 items ?"""

# your answer here
orders[orders.Quantity> 50]

"""#### Select orders from Spain that are above 50 items"""

# your answer here
var = orders[orders.Country=='Spain']
var[var.Quantity> 50]

"""#### Select all free orders"""

# your answer here
orders[orders.amount_spent == 0]

"""#### Select all orders that are 'lunch bag'
#### Hint: Use string functions
"""

# pONER FUNCIÃ“N LAMBDA
orders[orders.Description.apply(lambda x: True if 'lunch bag' in x else False)]

"""#### Select all orders that are made in 2011 and are 'lunch bag'"""

# your answer here
orders[orders.Description.apply(lambda x: True if 'lunch bag' in x else False)][orders.year==2011]

"""#### Show the frequency distribution of the amount spent in Spain."""

# your answer here
orders[orders.Country=='Spain'].hist()

"""#### Select all orders made in the month of August"""

# your answer here
orders[orders.month==8].count()

"""#### Select how many orders are made by countries in the month of August
##### Hint: Use value_counts()
"""

# your answer here
orders[orders.month==8].groupby(['Country'])['InvoiceNo'].count()

"""#### What's the  average amount of money spent by country"""

# your answer here
orders[orders.month > 0].groupby(['Country'])['amount_spent'].count()

"""#### What's the most expensive item?"""

# your answer here
orders[orders.UnitPrice==orders.UnitPrice.max()]

#Description     zinc wire sweetheart letter tray

"""#### What was the average amount spent per year ?"""

# your answer here
orders.groupby(['year']).amount_spent.mean()

